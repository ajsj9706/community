<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.dao.BoardDao">
    <resultMap id="boardMap" type="com.community.model.BoardModel">
        <id property="b_id" column="b_id"/>
        <result property="b_recomment_id" column="b_recomment_id"></result>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="updateCheck" column="updateCheck"></result>
        <result property="commentCount" column="commentCount1"></result>
    </resultMap>

    <resultMap id="rankMap" type="com.community.model.BoardModel">
        <id property="b_id" column="b_id"/>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="commentCount" column="commentCount1"></result>
    </resultMap>

    <resultMap id="viewMap" type="com.community.model.ViewModel">
        <id property="b_id" column="b_id"/>
        <result property="b_recomment_id" column="b_recomment_id"></result>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_content" column="b_content"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="profile" column="profile"/>

        <collection property="comments" ofType="com.community.model.CommentModel">
            <id property="c_id" column="first_c_id"></id>
            <result property="b_id" column="first_b_id"></result>
            <result property="recomment_id" column="first_recomment_id"></result>
            <result property="c_content" column="first_c_content"></result>
            <result property="c_date" column="first_c_date"></result>
            <result property="userId" column="first_userId"></result>
            <result property="updateCheck" column="first_c_updateCheck"></result>
            <result property="profile" column="first_profile"/>
        </collection>
    </resultMap>

    <select id="getBoardList" resultMap="boardMap">
            SELECT
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId, c.updateCheck,
            (select count(c_content) from community_comment where b_id = c.b_id) AS commentCount1
        FROM
            community AS c
		group by
			c.b_id
        ORDER BY
			c.b_recomment_id ASC, c.b_date ASC
    </select>

    <select id="getMyBoardList" resultMap="boardMap">
        SELECT
            c.b_id, c.b_recomment_id, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_title, c.b_date, c.b_count, c.userId,
            (select count(c_content) from community_comment where b_id = c.b_id) AS commentCount1
        FROM
            community AS c
        WHERE
            c.userId = #{userId}
		GROUP BY
			c.b_id
        ORDER BY
            c.b_id
        DESC
    </select>

    <select id="getView" resultMap="viewMap">
        select
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, c.b_content, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            (select profile from community_member where userId = c.userId) AS profile,
            cc.c_id AS first_c_id, cc.b_id AS first_b_id, cc.recomment_id AS first_recomment_id, cc.c_content AS first_c_content,
            UNIX_TIMESTAMP(cc.c_date) AS first_c_date, cc.userId AS first_userId, cc.updateCheck AS first_c_updateCheck,
            (select profile from community_member where userId = cc.userId) AS first_profile
        from
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.b_id = ${b_id}
        order by
            cc.b_id DESC, cc.recomment_id ASC, cc.c_date ASC
    </select>

    <insert id="insert" parameterType="String">
        INSERT INTO
            community(b_recomment_id, b_type, b_title, b_date, b_content, userId)
        VALUES
            ((SELECT AUTO_INCREMENT
                FROM information_schema.tables
                WHERE table_name = 'community'
                AND table_schema = DATABASE()), #{b_type}, #{b_title}, now(), #{b_content}, #{user_id})
    </insert>

    <insert id="secondInsert" parameterType="String">
        INSERT INTO
            community(b_recomment_id, b_type, b_title, b_date, b_content, userId)
        VALUES
            (${b_recomment_id}, #{b_type}, #{b_title}, now(), #{b_content}, #{user_id})
    </insert>

    <update id="update" parameterType="String">
        UPDATE
            community
        SET
            b_type = #{b_type}, b_title = #{b_title}, b_content = #{b_content}, updateCheck = 1
        WHERE
            b_id = ${b_id}
    </update>

    <update id="count" parameterType="String">
        UPDATE
            community AS c, (SELECT MAX(b_count)+1 AS result FROM community WHERE b_id = ${b_id}) AS a
        SET
            b_count = a.result
        WHERE
            b_id = ${b_id}
    </update>
    <delete id="delete" parameterType="String">
        DELETE FROM
            community
        WHERE
            b_id = ${b_id}
    </delete>

    <select id="search" resultMap="boardMap">
        SELECT
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            (select count(c_content) from community_comment where b_id = c.b_id) AS commentCount1
        FROM
            community AS c
        WHERE
            c.b_title LIKE CONCAT('%',#{word} ,'%')
        ORDER BY
            c.b_id
        DESC
    </select>

    <select id="getRank" resultMap="rankMap">
        SELECT
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            (select count(c_content) from community_comment where b_id = c.b_id) AS commentCount1
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.b_id = c.b_recomment_id
		GROUP BY
			c.b_id
        ORDER BY
            c.b_count
        DESC
    </select>

    <insert id="imageInsert" parameterType="com.community.model.ImageModel">
        INSERT INTO
            community_image(b_id, image, fileName, UUID_fileName)
        VALUES
            (${b_id}, #{image}, #{fileName}, #{saveFileName})
    </insert>


    <insert id="imageUpload" parameterType="com.community.model.ImageModel">
        INSERT INTO
            community_image(b_id, image, fileName)
        VALUES
            (${b_id}, #{image}, #{fileName})
    </insert>

    <select id="getImage" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, image, fileName
        FROM
            community_image
        WHERE
            b_id = ${b_id}
    </select>

    <select id="getViewImage" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, image, fileName
        FROM
            community_image
        WHERE
            i_id = ${i_id}
    </select>

    <delete id="deleteImage" parameterType="Integer">
        DELETE FROM
            community_image
        WHERE
            i_id = ${i_id}
    </delete>

    <select id="getB_id" resultType="int">
        SELECT
            MAX(b_id)
        FROM
            community
    </select>
</mapper>