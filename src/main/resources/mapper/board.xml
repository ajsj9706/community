<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.dao.BoardDao">
    <resultMap id="boardMap" type="com.community.model.BoardModel">
        <id property="b_id" column="b_id"/>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="group_id" column="group_id"></result>
        <result property="parent_reply_id" column="parent_reply_id"></result>
        <result property="depth" column="depth"></result>
        <result property="order_no" column="order_no"></result>
        <result property="updateCheck" column="updateCheck"></result>
        <result property="commentCount" column="commentCount1"></result>
    </resultMap>

    <resultMap id="viewMap" type="com.community.model.ViewModel">
        <id property="b_id" column="b_id"/>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_content" column="b_content"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="group_id" column="group_id"></result>
        <result property="parent_reply_id" column="parent_reply_id"></result>
        <result property="depth" column="depth"></result>
        <result property="order_no" column="order_no"></result>
        <result property="file_path" column="file_path"/>
        <collection property="comments" ofType="com.community.model.CommentModel">
            <id property="c_id" column="first_c_id"></id>
            <result property="b_id" column="first_b_id"></result>
            <result property="userId" column="first_userId"></result>
            <result property="c_content" column="first_c_content"></result>
            <result property="c_date" column="first_c_date"></result>
            <result property="updateCheck" column="first_c_updateCheck"></result>
            <result property="file_path" column="first_profile"></result>
            <result property="group_id" column="first_group_id"></result>
            <result property="parent_reply_id" column="first_parent_reply_id"></result>
            <result property="depth" column="first_depth"></result>
            <result property="order_no" column="first_order_no"></result>
        </collection>
    </resultMap>

    <select id="getBoardList" resultMap="boardMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no, c.updateCheck,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
		LEFT OUTER JOIN
			community_comment AS cc ON c.b_id = cc.b_id
		group by
			c.b_id
        ORDER BY
            c.group_id DESC, c.order_no ASC
    </select>

    <select id="getMyBoardList" resultMap="boardMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no, c.updateCheck,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
		LEFT OUTER JOIN
			community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.userId = #{userId}
		GROUP BY
			c.b_id
    </select>

    <select id="getMyCommentBoards" resultMap="boardMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no, c.updateCheck,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
		LEFT OUTER JOIN
			community_comment AS cc on c.b_id = cc.b_id
		where
			c.b_id in (select b_id from community_comment where userId = #{userId} group by b_id)
		group by
			c.b_id
        ORDER BY
		    c.group_id ASC, c.order_no ASC
    </select>

    <select id="getView" resultMap="viewMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_content, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no,
            m.file_path,
            cc.c_id AS first_c_id, cc.b_id AS first_b_id, cc.userId AS first_userId, cc.c_content AS first_c_content, cc.c_date AS first_c_date,
            cc.group_id AS first_group_id, cc.parent_reply_id AS first_parent_reply_id, cc.depth AS first_depth, cc.order_no AS first_order_no,
            cc.updateCheck AS first_c_updateCheck,
            mm.file_path AS first_profile
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        LEFT OUTER JOIN
            community_member AS m ON c.userId = m.userId
        LEFT OUTER JOIN
            community_member AS mm ON cc.userId = mm.userId
        WHERE
            c.b_id = ${b_id}
        order by
            cc.b_id DESC, cc.group_id ASC, cc.order_no ASC
    </select>

    <insert id="insert" parameterType="String">
        INSERT INTO
            community(b_type, b_title, b_date, b_content, userId, group_id, parent_reply_id)
        VALUES
            (#{b_type}, #{b_title}, now(), #{b_content}, #{user_id},
            (SELECT AUTO_INCREMENT
                FROM information_schema.tables
                WHERE table_name = 'community'
                AND table_schema = DATABASE()),

                (SELECT AUTO_INCREMENT
                FROM information_schema.tables
                WHERE table_name = 'community'
                AND table_schema = DATABASE()))
    </insert>

    <insert id="replyBoardInsert" parameterType="String">
        INSERT INTO
            community(b_type, b_title, b_date, b_content, userId, group_id, parent_reply_id, depth, order_no)
        VALUES
            (#{b_type}, #{b_title}, now(), #{b_content}, #{userId}, ${group_id}, ${parent_reply_id}, ${depth}+1, ${order_no}+1)
    </insert>

    <update id="update" parameterType="String">
        UPDATE
            community
        SET
            b_type = #{b_type}, b_title = #{b_title}, b_content = #{b_content}, updateCheck = 1, b_date = now()
        WHERE
            b_id = ${b_id}
    </update>

    <update id="count" parameterType="String">
        UPDATE
            community AS c, (SELECT MAX(b_count)+1 AS result FROM community WHERE b_id = ${b_id}) AS a
        SET
            b_count = a.result
        WHERE
            b_id = ${b_id}
    </update>

    <delete id="delete" parameterType="String">
        DELETE FROM
            community
        WHERE
            b_id = ${b_id}
    </delete>

    <select id="search" resultMap="boardMap">
         SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no, c.updateCheck,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
		LEFT OUTER JOIN
			community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.b_title LIKE CONCAT('%',#{word} ,'%')
        GROUP BY
			c.b_id
        ORDER BY
            c.group_id ASC, c.order_no ASC
    </select>

    <select id="getRank" resultMap="boardMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId, c.group_id, c.parent_reply_id, c.depth, c.order_no, c.updateCheck,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
		LEFT OUTER JOIN
			community_comment AS cc ON c.b_id = cc.b_id
		GROUP BY
			c.b_id
        ORDER BY
            c.b_count
        DESC
    </select>

    <update id="updateImage" parameterType="int">
        UPDATE
            community_image
        SET
            file_name=#{file_name}, file_path=#{file_path}
        WHERE
            i_id = ${i_id}
    </update>


    <insert id="uploadImage" parameterType="com.community.model.ImageModel">
        INSERT INTO
            community_image(b_id, file_name, file_path)
        VALUES
            (${b_id}, #{file_name}, #{file_path})
    </insert>

    <select id="getImageInfo" resultType="com.community.model.ImageModel">
        SELECT
            *
        FROM
            community_image
        WHERE
            i_id = ${i_id}
    </select>

    <select id="getImages" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, file_name, file_path
        FROM
            community_image
        WHERE
            b_id = ${b_id}
    </select>

    <select id="getViewImage" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, file_name, file_path
        FROM
            community_image
        WHERE
            i_id = ${i_id}
    </select>

    <delete id="deleteImage" parameterType="String">
        DELETE FROM
            community_image
        WHERE
            file_name = #{file_name}
    </delete>

    <select id="getB_id" resultType="int">
        SELECT
            MAX(b_id)
        FROM
            community
    </select>

    <update id="update_order_no" parameterType="int">
        UPDATE
            community
        SET
            order_no = order_no + 1
        WHERE
            order_no > ${order_no}
        AND
            group_id = ${group_id}
    </update>

    <select id="order_no_max" resultType="int">
        SELECT
            max(order_no)
        FROM
            community
        WHERE
            group_id = ${group_id}
    </select>

    <select id="check_parent_reply_id" resultType="int">
        SELECT
            if(count(*) = 0, null, count(*))
        FROM
            community
        WHERE
            parent_reply_id = ${parent_reply_id}
    </select>

    <select id="get_max_order_no" resultType="int">
        SELECT
            max(order_no)
        FROM
            community
        WHERE
            parent_reply_id = ${parent_reply_id}
    </select>

    <select id="test" resultType="String">
        select
            substring_index(substring_index(b_content, #{a}, 1)
        from community
        where b_id = ${b_id}
        and b_content like #{b}
    </select>
</mapper>