<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.dao.BoardDao">
    <resultMap id="boardMap" type="com.community.model.BoardModel">
        <id property="b_id" column="b_id"/>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
<!--        <result property="commentCount" column="commentCount1"></result>-->
        <collection property="boardComments" ofType="com.community.model.BoardComment">
            <id property="b_id" column="boardComment_b_id"></id>
            <result property="b_recomment_id" column="boardComment_b_recomment_id"></result>
            <result property="b_type" column="boardComment_b_type"></result>
            <result property="b_title" column="boardComment_b_title"></result>
            <result property="b_content" column="boardComment_b_content"></result>
            <result property="b_date" column="boardComment_b_date"></result>
            <result property="b_count" column="boardComment_b_count"></result>
            <result property="userId" column="boardComment_userId"></result>
<!--            <result property="commentCount" column="commentCount2"></result>-->
        </collection>
    </resultMap>

    <resultMap id="rankMap" type="com.community.model.BoardModel">
        <id property="b_id" column="b_id"/>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="commentCount" column="commentCount1"></result>
    </resultMap>
    <resultMap id="viewMap" type="com.community.model.ViewModel">
        <id property="b_id" column="b_id"/>
        <result property="b_recomment_id" column="b_recomment_id"></result>
        <result property="b_type" column="b_type"></result>
        <result property="b_title" column="b_title"></result>
        <result property="b_content" column="b_content"></result>
        <result property="b_date" column="b_date"></result>
        <result property="b_count" column="b_count"></result>
        <result property="userId" column="userId"></result>
        <result property="profile" column="profile"/>

        <collection property="comments" ofType="com.community.model.CommentModel">
            <id property="c_id" column="first_c_id"></id>
            <result property="b_id" column="first_b_id"></result>
            <result property="c_content" column="first_c_content"></result>
            <result property="c_date" column="first_c_date"></result>
            <result property="userId" column="first_userId"></result>
            <result property="profile" column="first_profile"/>
        </collection>
    </resultMap>

    <select id="getBoardList" resultMap="boardMap">
        SELECT
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            c1.b_id AS boardComment_b_id, c1.b_recomment_id AS boardComment_b_recomment_id, c1.b_type AS boardComment_b_type,
            c1.b_title AS boardComment_b_title, c1.b_content AS boardComment_b_content, UNIX_TIMESTAMP(c1.b_date) AS boardComment_b_date, c1.b_count AS boardComment_b_count, c1.userId AS boardComment_userId
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        LEFT OUTER JOIN
            community AS c1 ON c.b_id = c1.b_recomment_id
        LEFT OUTER JOIN
            community_comment AS cc1 ON c1.b_id = cc1.b_id
        WHERE
            c.b_recomment_id is null
        group by
            c.b_id, c1.b_id
        ORDER BY
            c.b_id DESC, c1.b_id DESC
    </select>

    <select id="getMyBoardList" resultMap="boardMap">
        SELECT
            c.b_id, c.b_recomment_id, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_title, c.b_date, c.b_count, c.userId,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.userId = #{userId}
		GROUP BY
			c.b_id
        ORDER BY
            c.b_id
        DESC
    </select>

    <select id="getView" resultMap="viewMap">
--         SELECT
--             c.b_id, c.b_recomment_id, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_title, c.b_content, c.b_date, c.b_count, c.userId, m.profile,
--             fc.c_id AS first_c_id, fc.b_id AS first_b_id, fc.c_content AS first_c_content, fc.c_date AS first_c_date, fc.userId AS first_c_userId,
--             (SELECT profile FROM community_member WHERE userId = fc.userId) AS first_profile,
--             sc.c_id AS second_c_id, sc.b_id AS second_b_id, sc.recomment_id AS second_recomment_id, sc.c_content AS second_c_content, sc.c_date AS second_c_date, sc.userId AS second_c_userId,
--             (SELECT profile FROM community_member WHERE userId = sc.userId) AS second_profile
--         FROM
--             community AS c
--         LEFT OUTER JOIN
--             community_comment AS fc ON c.b_id = fc.b_id
--         LEFT OUTER JOIN
--             community_comment AS sc ON fc.c_id = sc.recomment_id
--         LEFT OUTER JOIN
--             community_member AS m ON c.userId = m.userId
--         WHERE
--             c.b_id = ${b_id}
--         AND
--             fc.recomment_id IS NULL
--         ORDER BY
--             fc.c_id
--         ASC
        select
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, c.b_content, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            cc.c_id AS first_c_id, cc.b_id AS first_b_id, cc.recomment_id AS first_recomment_id, cc.c_content AS first_c_content,
            UNIX_TIMESTAMP(cc.c_date) AS first_c_date, cc.userId AS first_userId
        from
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.b_id = ${b_id}
        order by
            cc.b_id desc, cc.recomment_id asc, cc.c_date asc
    </select>

    <insert id="insert" parameterType="String">
        INSERT INTO
            community(b_recomment_id, b_type, b_title, b_date, b_content, userId)
        VALUES
            (if(${b_recomment_id}=0, null, ${b_recomment_id}), #{b_type}, #{b_title}, now(), #{b_content}, #{user_id})
    </insert>

    <update id="update" parameterType="String">
        UPDATE
            community
        SET
            b_type = #{b_type}, b_title = #{b_title}, b_content = #{b_content}, b_date =now()
        WHERE
            b_id = ${b_id}
    </update>

    <update id="count" parameterType="String">
        UPDATE
            community AS c, (SELECT MAX(b_count)+1 AS result FROM community WHERE b_id = ${b_id}) AS a
        SET
            b_count = a.result
        WHERE
            b_id = ${b_id}
    </update>
    <delete id="delete" parameterType="String">
        DELETE FROM
            community
        WHERE
            b_id = ${b_id}
    </delete>

    <select id="search" resultMap="boardMap">
        SELECT
            c.b_id, c.b_type, c.b_title, c.b_date, c.b_count, c.userId,
            cc.c_content
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
        WHERE
            c.b_title LIKE CONCAT('%',#{word} ,'%')
        ORDER BY
            c.b_id
        DESC
    </select>

    <select id="getRank" resultMap="rankMap">
        SELECT
            c.b_id, c.b_recomment_id, c.b_type, c.b_title, UNIX_TIMESTAMP(c.b_date) AS b_date, c.b_count, c.userId,
            count(cc.c_content) AS commentCount1
        FROM
            community AS c
        LEFT OUTER JOIN
            community_comment AS cc ON c.b_id = cc.b_id
		WHERE
			c.b_recomment_id is null
		GROUP BY
			c.b_id
        ORDER BY
            c.b_count
        DESC
    </select>

    <insert id="imageInsert" parameterType="com.community.model.ImageModel">
        INSERT INTO
            community_image(b_id, image, fileName, UUID_fileName)
        VALUES
            (${b_id}, #{image}, #{fileName}, #{saveFileName})
    </insert>


    <insert id="imageUpload" parameterType="com.community.model.ImageModel">
        INSERT INTO
            community_image(b_id, image, fileName)
        VALUES
            (${b_id}, #{image}, #{fileName})
    </insert>

    <select id="getImage" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, image, fileName
        FROM
            community_image
        WHERE
            b_id = ${b_id}
    </select>

    <select id="getViewImage" resultType="com.community.model.ImageModel">
        SELECT
            i_id, b_id, image, fileName
        FROM
            community_image
        WHERE
            i_id = ${i_id}
    </select>

    <delete id="deleteImage" parameterType="Integer">
        DELETE FROM
            community_image
        WHERE
            i_id = ${i_id}
    </delete>

    <select id="getB_id" resultType="int">
        SELECT
            MAX(b_id)
        FROM
            community
    </select>
</mapper>